generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../src/@generated"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String      @id @default(cuid())  // Match Supabase UUID if you want 1:1 mapping
  email          String      @unique
  username       String      @unique
  name           String?
  image          String?
  role           Role        @default(USER)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  recipes        Recipe[]
  cookbooks      Cookbook[]
  communities    Community[]
  comments       Comment[]
  mainCookbookId Int?

  @@index([username, email])
}

model Cookbook {
  id             Int         @id @default(autoincrement())
  name           String
  description    String?
  isPublic       Boolean     @default(false)
  isMainCookbook Boolean     @default(false)
  userId         String         
  user           User        @relation(fields: [userId], references: [id])
  recipes        Recipe[]
  communities    Community[]
  rating         Decimal?    @db.Decimal(3, 2)
  ratingsCount   Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  @@index([name, userId])
}

model Recipe {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  directions  String[]
  ingredients String[]
  prepTime    Int?
  cookTime    Int?
  isPublic    Boolean     @default(false)
  userId      String
  user        User        @relation(fields: [userId], references: [id]) 
  cookbook    Cookbook[]
  communities Community[]
  rating      Decimal?    @db.Decimal(3, 2)
  ratingsCount   Int         @default(0)
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@index([name, userId, prepTime, cookTime]) 
}

model Community {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  userId      String
  user        User       @relation(fields: [userId], references: [id]) 
  recipes     Recipe[]
  cookbooks   Cookbook[]
  @@index([name, userId]) 
}

model Comment {
  id           Int          @id @default(autoincrement())
  description  String
  rating       Decimal?     @db.Decimal(2, 1)
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  resourceId   Int
  resourceType ResourceType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  @@index([userId, resourceId, resourceType])
}

model Permission {
  id              Int             @id @default(autoincrement())
  permissionLevel PermissionLevel
  userId          String
  resourceId      Int
  resourceType    ResourceType
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  @@index([userId, resourceId, resourceType, permissionLevel])
}

enum Role {
  USER
  ADMIN
}

enum PermissionLevel {
  CREATOR
  EDITOR
  VIEWER
}

enum ResourceType {
  RECIPE
  COOKBOOK
  COMMUNITY
}
